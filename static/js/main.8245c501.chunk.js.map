{"version":3,"sources":["Box.js","App.js","index.js"],"names":["Box","props","id","row","col","className","style","border","height","boxSize","toString","width","App","running","interval","getElement","coords","document","getElementById","startAlgorithm","clearInterval","goButton","innerHTML","color","disabled","stopInterval","setInterval","tickFunction","timeDelay","console","log","transformArray","Array","from","gridHeight","_","gridWidth","fill","element","neighbors","getNeighbors","aliveCount","classList","contains","add","remove","getAttribute","parseInt","getCoords","elements","push","filter","a","paint","e","clickOverride","window","event","buttons","lastClickedCoords","Math","floor","clientX","innerWidth","offsetWidth","getElementsByClassName","childNodes","clientY","currentRow","currentCol","addEventListener","preventDefault","display","innerHeight","userSelect","onClick","clear","type","placeholder","onChange","target","value","onMouseMove","onMouseDown","grid","makeGrid","map","key","location","reload","href","rel","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8245c501.chunk.js","sourcesContent":["\r\nexport default function Box(props){\r\n    return(\r\n        <div id={'row'+props.row+\"col\"+props.col} className='box' row={props.row} col={props.col} style={{\r\n            // backgroundColor: 'grey',\r\n            border: '1px solid black',\r\n            height: (props.boxSize-2).toString() + 'px',\r\n            width: (props.boxSize-2).toString() + 'px'\r\n        }}></div>\r\n    )\r\n}","import Box from './Box.js'\nimport './styles.css'\n\nexport default function App() {\n\n  // keep track of weather or not it is running\n  var running;\n\n  // timing for visualizations\n  var interval = null;\n\n  // getting grid coords from cell element\n  // return type: [int, int]\n  function getCoords(element) {\n    var row = element.getAttribute('row')\n    var col = element.getAttribute('col')\n    row = parseInt(row)\n    col = parseInt(col)\n    return ([row, col])\n  }\n\n  // getting cell element from grid coords\n  // input: [int, int] || [row, col]\n  function getElement(coords) {\n    var [row, col] = coords\n    return (document.getElementById('row' + row + 'col' + col))\n  }\n\n  // clears the used squares before running, checks start and end, passed the function to call.\n  // return: null\n  function startAlgorithm() {\n\n    if (running) {\n      stopInterval()\n      return\n    }\n    var goButton = document.getElementById('goButton')\n    goButton.innerHTML = \"Stop\"\n    goButton.style.color = 'Red'\n    var speedInput = document.getElementById(\"simSpeed\")\n    speedInput.disabled = true\n\n\n    running = true\n\n    // need a settimeout here\n    interval = setInterval(tickFunction, timeDelay);\n    console.log(interval)\n  }\n\n  function tickFunction(){\n    console.log(\"HERE\")\n    // 0 means kill, 1 means spawn\n    let transformArray = Array.from(Array(gridHeight), _ => Array(gridWidth).fill(0))\n\n    for (let row = 0; row < gridHeight; row++){\n      for (let col = 0; col < gridWidth; col++){\n        let element = getElement([row, col])\n        let neighbors =  getNeighbors(element)\n        let aliveCount = 0\n        for (let neighbor of neighbors){\n          if (neighbor.classList.contains(\"alive\")){\n            aliveCount += 1;\n          }\n        }\n\n        if (element.classList.contains(\"alive\")){\n          if (!(aliveCount <= 1 || aliveCount >= 4)){\n            transformArray[row][col] = 1\n          }\n        }\n        else{\n          if (aliveCount == 3){\n            transformArray[row][col] = 1\n          }\n        }\n\n      }\n    }\n\n    for (let row = 0; row < gridHeight; row++){\n      for (let col = 0; col < gridWidth; col++){\n        let element = getElement([row, col])\n        if (transformArray[row][col] == 1){\n          element.classList.add(\"alive\")\n        }\n        else{\n          element.classList.remove('alive')\n        }\n      }\n    }\n\n  }\n\n  function step(){\n    if (running) return;\n    tickFunction()\n  }\n\n  // get the given neighbors of a cell.. this includes barriers and closed nodes so have to filter in the function\n  // returns array of elements\n  function getNeighbors(element) {\n    var [row, col] = getCoords(element)\n    var elements = []\n\n    elements.push(getElement([row + 1, col]))\n    elements.push(getElement([row - 1, col]))\n    elements.push(getElement([row, col + 1]))\n    elements.push(getElement([row, col - 1]))\n\n    elements.push(getElement([row + 1, col + 1]))\n    elements.push(getElement([row + 1, col - 1]))\n    elements.push(getElement([row - 1, col + 1]))\n    elements.push(getElement([row - 1, col - 1]))\n\n    // filter out the null elements\n    elements = elements.filter((a) => a)\n\n    return (elements)\n  }\n\n  // stop the interval from running when the algorithm is done\n  function stopInterval() {\n    clearInterval(interval)\n    running = false\n    var goButton = document.getElementById('goButton')\n    goButton.innerHTML = \"Go\"\n    goButton.style.color = ''\n    var speedInput = document.getElementById(\"simSpeed\")\n    speedInput.disabled = false;\n  }\n\n  function clear(){\n    if (running) return;\n    for (let row = 0; row < gridHeight; row++){\n      for (let col = 0; col < gridWidth; col++){\n        let element = getElement([row, col])\n        element.classList.remove(\"alive\")\n      }\n    }\n  }\n\n  // paint function takes a event and paints color onto the screen\n  // click override is just saying it was a click event and not mouse movement, so it doesnt pass a button, we have to manually set it\n  function paint(e, clickOverride = false) {\n\n    if ((window.event.buttons !== 0 || clickOverride) && !running) {\n      // big math to figure out which cell the mouse is over\n      var col = Math.floor((e.clientX - ((window.innerWidth - document.getElementById('grid').offsetWidth) / 2)) / document.getElementsByClassName('row')[0].childNodes[0].offsetWidth)\n      var row = Math.floor((e.clientY - 90) / boxSize)\n\n      var element = document.getElementById('row' + row + 'col' + col)\n      if (!element) {\n        return\n      }\n\n      // paint the boxes when clicked, including the ones in between because it doesn't fire enough\n      if (!lastClickedCoords) {\n        var currentRow = row\n        var currentCol = col\n      }\n      else {\n        currentRow = lastClickedCoords[0]\n        currentCol = lastClickedCoords[1]\n      }\n\n      do {\n        if (row > currentRow) {\n          currentRow += 1\n        }\n        else if (row < currentRow) {\n          currentRow -= 1\n        }\n        if (col > currentCol) {\n          currentCol += 1\n        }\n        else if (col < currentCol) {\n          currentCol -= 1\n        }\n\n        if (window.event.buttons === 1) {\n          document.getElementById('row' + currentRow + 'col' + currentCol).classList.add('alive')\n        }\n        else if (window.event.buttons === 2) {\n          document.getElementById('row' + currentRow + 'col' + currentCol).classList.remove(\"alive\")\n        }\n      } while (currentRow !== row || currentCol !== col);\n      lastClickedCoords = [row, col]\n    }\n    else {\n      lastClickedCoords = null\n    }\n  }\n\n  // no context menu, reload button pops up on resize\n  window.addEventListener('contextmenu', e => e.preventDefault())\n  window.addEventListener('resize', e => document.getElementById('resizeAlert').style.display = 'block')\n\n  // RENDERING\n\n  // default cell size\n  var boxSize = 20\n  // used to trace the mouse, as the events don't trigger fast enough for me :/\n  var lastClickedCoords = null\n\n  var gridHeight = Math.floor((window.innerHeight - 90) / boxSize)\n  var gridWidth = Math.floor((window.innerWidth) / boxSize)\n\n  var timeDelay = 100;\n\n  function makeGrid() {\n    var grid = []\n    for (let row = 0; row < gridHeight; row++) {\n      grid.push([])\n      for (let col = 0; col < gridWidth; col++) {\n        grid[row].push(<Box row={row} col={col} boxSize={boxSize} />)\n      }\n    }\n    return (grid)\n  }\n\n  return (\n    <div className=\"App\" style={{ userSelect: 'none' }}>\n      <div id='header'>\n        <p className=\"button\" onClick={() => startAlgorithm()} id='goButton'>Go</p>\n        <p className=\"button\" onClick={() => step()} id='stepButton'>Step</p>\n        <p className=\"button\" onClick={() => clear()} id='clearButton'>Clear</p>\n        <p>Sim Speed (ms):</p>\n        <input id='simSpeed' type='number' placeholder='100' onChange={(e) => timeDelay = e.target.value}/>\n      </div>\n      <div id='grid' onMouseMove={e => paint(e)} onMouseDown={e => paint(e, true)}>\n        {makeGrid().map((row, key) => {\n          return (\n            <div className='row' id={key}>\n              {row.map((element) => {\n                return (element)\n              })}\n            </div>\n          )\n        })}\n      </div>\n      <span id='resizeAlert' onClick={() => window.location.reload()}>Looks like you resized your window. <br /> Click here to reset the grid</span>\n      <p id='myName'><a href='https://owenmoogk.github.io' target='_blank' rel='noreferrer'>Owen Moogk</a></p>\n      <p id='infoButton'><a href='https://owenmoogk.github.io/projects/game-of-life' target='_blank' rel='noreferrer'>About This Project</a></p>\n    </div>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
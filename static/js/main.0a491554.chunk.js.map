{"version":3,"sources":["Box.js","App.js","index.js"],"names":["Box","props","mouseEnter","event","currentElement","document","getElementById","row","col","console","log","buttons","classList","add","remove","id","className","onMouseEnter","e","onMouseDown","style","border","height","boxSize","toString","width","App","running","interval","getElement","coords","startAlgorithm","clearInterval","goButton","innerHTML","color","disabled","stopInterval","setInterval","tickFunction","timeDelay","transformArray","Array","from","gridHeight","_","gridWidth","fill","element","neighbors","getNeighbors","aliveCount","contains","getAttribute","parseInt","getCoords","elements","push","filter","a","window","addEventListener","preventDefault","display","Math","floor","innerHeight","innerWidth","userSelect","onClick","clear","type","placeholder","onChange","target","value","grid","makeGrid","map","key","location","reload","href","rel","ReactDOM","render","StrictMode"],"mappings":"4LAAe,SAASA,EAAIC,GAExB,SAASC,EAAWC,GAEhB,IAAMC,EAAiBC,SAASC,eAAe,MAAQL,EAAMM,IAAM,MAAQN,EAAMO,KACjFC,QAAQC,IAAIP,EAAMQ,SAEI,IAAlBR,EAAMQ,QAKY,IAAlBR,EAAMQ,SACNP,EAAeQ,UAAUC,IAAI,SAL7BT,EAAeQ,UAAUE,OAAO,SAUxC,OACI,qBAAKC,GAAI,MAAMd,EAAMM,IAAI,MAAMN,EAAMO,IAAKQ,UAAU,MAAMC,aAAc,SAACC,GAAD,OAAOhB,EAAWgB,IAAIC,YAAa,SAACD,GAAD,OAAOhB,EAAWgB,IAAIX,IAAKN,EAAMM,IAAKC,IAAKP,EAAMO,IAAKY,MAAO,CAEpKC,OAAQ,kBACRC,QAASrB,EAAMsB,QAAQ,GAAGC,WAAa,KACvCC,OAAQxB,EAAMsB,QAAQ,GAAGC,WAAa,Q,MCpBnC,SAASE,IAGtB,IAAIC,EAGAC,EAAW,KAcf,SAASC,EAAWC,GAClB,IAAI,EAAJ,YAAiBA,EAAjB,GAAKvB,EAAL,KAAUC,EAAV,KACA,OAAQH,SAASC,eAAe,MAAQC,EAAM,MAAQC,GAKxD,SAASuB,IAEP,GAAIJ,GAyFN,WACEK,cAAcJ,GACdD,GAAU,EACV,IAAIM,EAAW5B,SAASC,eAAe,YACvC2B,EAASC,UAAY,KACrBD,EAASb,MAAMe,MAAQ,GACN9B,SAASC,eAAe,YAC9B8B,UAAW,EA/FpBC,OADF,CAIA,IAAIJ,EAAW5B,SAASC,eAAe,YACvC2B,EAASC,UAAY,OACrBD,EAASb,MAAMe,MAAQ,MACN9B,SAASC,eAAe,YAC9B8B,UAAW,EAGtBT,GAAU,EAGVC,EAAWU,YAAYC,EAAcC,GACrC/B,QAAQC,IAAIkB,IAGd,SAASW,IAIP,IAFA,IAAIE,EAAiBC,MAAMC,KAAKD,MAAME,IAAa,SAAAC,GAAC,OAAIH,MAAMI,GAAWC,KAAK,MAErExC,EAAM,EAAGA,EAAMqC,EAAYrC,IAClC,IAAK,IAAIC,EAAM,EAAGA,EAAMsC,EAAWtC,IAAM,CACvC,IADuC,EACnCwC,EAAUnB,EAAW,CAACtB,EAAKC,IAC3ByC,EAAaC,EAAaF,GAC1BG,EAAa,EAHsB,cAIlBF,GAJkB,IAIvC,2BAA+B,SAChBrC,UAAUwC,SAAS,WAC9BD,GAAc,IANqB,8BAUnCH,EAAQpC,UAAUwC,SAAS,SACvBD,GAAc,GAAKA,GAAc,IACrCV,EAAelC,GAAKC,GAAO,GAIX,GAAd2C,IACFV,EAAelC,GAAKC,GAAO,GAOnC,IAAK,IAAID,EAAM,EAAGA,EAAMqC,EAAYrC,IAClC,IAAK,IAAIC,EAAM,EAAGA,EAAMsC,EAAWtC,IAAM,CACvC,IAAIwC,EAAUnB,EAAW,CAACtB,EAAKC,IACC,GAA5BiC,EAAelC,GAAKC,GACtBwC,EAAQpC,UAAUC,IAAI,SAGtBmC,EAAQpC,UAAUE,OAAO,UAcjC,SAASoC,EAAaF,GACpB,IAAI,EAxFN,SAAmBA,GACjB,IAAIzC,EAAMyC,EAAQK,aAAa,OAC3B7C,EAAMwC,EAAQK,aAAa,OAG/B,MAAQ,CAFR9C,EAAM+C,SAAS/C,GACfC,EAAM8C,SAAS9C,IAoFE+C,CAAUP,GAA3B,mBAAKzC,EAAL,KAAUC,EAAV,KACIgD,EAAW,GAef,OAbAA,EAASC,KAAK5B,EAAW,CAACtB,EAAM,EAAGC,KACnCgD,EAASC,KAAK5B,EAAW,CAACtB,EAAM,EAAGC,KACnCgD,EAASC,KAAK5B,EAAW,CAACtB,EAAKC,EAAM,KACrCgD,EAASC,KAAK5B,EAAW,CAACtB,EAAKC,EAAM,KAErCgD,EAASC,KAAK5B,EAAW,CAACtB,EAAM,EAAGC,EAAM,KACzCgD,EAASC,KAAK5B,EAAW,CAACtB,EAAM,EAAGC,EAAM,KACzCgD,EAASC,KAAK5B,EAAW,CAACtB,EAAM,EAAGC,EAAM,KACzCgD,EAASC,KAAK5B,EAAW,CAACtB,EAAM,EAAGC,EAAM,KAGzCgD,EAAWA,EAASE,QAAO,SAACC,GAAD,OAAOA,KA2BpCC,OAAOC,iBAAiB,eAAe,SAAA3C,GAAC,OAAIA,EAAE4C,oBAC9CF,OAAOC,iBAAiB,UAAU,SAAA3C,GAAC,OAAIb,SAASC,eAAe,eAAec,MAAM2C,QAAU,WAK9F,IAEInB,EAAaoB,KAAKC,OAAOL,OAAOM,YAAc,IAFpC,IAGVpB,EAAYkB,KAAKC,MAAOL,OAAOO,WAHrB,IAKV3B,EAAY,IAahB,OACE,sBAAKxB,UAAU,MAAMI,MAAO,CAAEgD,WAAY,QAA1C,UACE,sBAAKrD,GAAG,SAAR,UACE,mBAAGC,UAAU,SAASqD,QAAS,kBAAMtC,KAAkBhB,GAAG,WAA1D,gBACA,mBAAGC,UAAU,SAASqD,QAAS,WA5E/B1C,GACJY,KA2EiDxB,GAAG,aAAhD,kBACA,mBAAGC,UAAU,SAASqD,QAAS,kBAxCrC,WACE,IAAI1C,EACJ,IAAK,IAAIpB,EAAM,EAAGA,EAAMqC,EAAYrC,IAClC,IAAK,IAAIC,EAAM,EAAGA,EAAMsC,EAAWtC,IACnBqB,EAAW,CAACtB,EAAKC,IACvBI,UAAUE,OAAO,SAmCYwD,IAASvD,GAAG,cAAjD,mBACA,gDACA,uBAAOA,GAAG,WAAWwD,KAAK,SAASC,YAAY,MAAMC,SAAU,SAACvD,GAAD,OAAOsB,EAAYtB,EAAEwD,OAAOC,YAE7F,qBAAK5D,GAAG,OAAR,SApBJ,WAEE,IADA,IAAI6D,EAAO,GACFrE,EAAM,EAAGA,EAAMqC,EAAYrC,IAAO,CACzCqE,EAAKnB,KAAK,IACV,IAAK,IAAIjD,EAAM,EAAGA,EAAMsC,EAAWtC,IACjCoE,EAAKrE,GAAKkD,KAAK,cAACzD,EAAD,CAAKO,IAAKA,EAAKC,IAAKA,EAAKe,QAZhC,MAeZ,OAAQqD,EAaHC,GAAWC,KAAI,SAACvE,EAAKwE,GACpB,OACE,qBAAK/D,UAAU,MAAMD,GAAIgE,EAAzB,SACGxE,EAAIuE,KAAI,SAAC9B,GACR,OAAQA,YAMlB,uBAAMjC,GAAG,cAAcsD,QAAS,kBAAMT,OAAOoB,SAASC,UAAtD,iDAAoG,uBAApG,mCACA,mBAAGlE,GAAG,SAAN,SAAe,mBAAGmE,KAAK,8BAA8BR,OAAO,SAASS,IAAI,aAA1D,0BACf,mBAAGpE,GAAG,aAAN,SAAmB,mBAAGmE,KAAK,oDAAoDR,OAAO,SAASS,IAAI,aAAhF,qCCxLzBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC5D,EAAD,MAEFrB,SAASC,eAAe,W","file":"static/js/main.0a491554.chunk.js","sourcesContent":["export default function Box(props){\r\n    \r\n    function mouseEnter(event){\r\n        \r\n        const currentElement = document.getElementById('row' + props.row + 'col' + props.col)\r\n        console.log(event.buttons)\r\n\r\n        if (event.buttons === 2){\r\n            currentElement.classList.remove('alive')\r\n            return;\r\n        }\r\n\r\n        if (event.buttons === 1){\r\n            currentElement.classList.add(\"alive\")\r\n            return;\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div id={'row'+props.row+\"col\"+props.col} className='box' onMouseEnter={(e) => mouseEnter(e)} onMouseDown={(e) => mouseEnter(e)} row={props.row} col={props.col} style={{\r\n            // backgroundColor: 'grey',\r\n            border: '1px solid black',\r\n            height: (props.boxSize-2).toString() + 'px',\r\n            width: (props.boxSize-2).toString() + 'px'\r\n        }}></div>\r\n    )\r\n}","import Box from './Box.js'\nimport './styles.css'\n\nexport default function App() {\n\n  // keep track of weather or not it is running\n  var running;\n\n  // timing for visualizations\n  var interval = null;\n\n  // getting grid coords from cell element\n  // return type: [int, int]\n  function getCoords(element) {\n    var row = element.getAttribute('row')\n    var col = element.getAttribute('col')\n    row = parseInt(row)\n    col = parseInt(col)\n    return ([row, col])\n  }\n\n  // getting cell element from grid coords\n  // input: [int, int] || [row, col]\n  function getElement(coords) {\n    var [row, col] = coords\n    return (document.getElementById('row' + row + 'col' + col))\n  }\n\n  // clears the used squares before running, checks start and end, passed the function to call.\n  // return: null\n  function startAlgorithm() {\n\n    if (running) {\n      stopInterval()\n      return\n    }\n    var goButton = document.getElementById('goButton')\n    goButton.innerHTML = \"Stop\"\n    goButton.style.color = 'Red'\n    var speedInput = document.getElementById(\"simSpeed\")\n    speedInput.disabled = true\n\n\n    running = true\n\n    // need a settimeout here\n    interval = setInterval(tickFunction, timeDelay);\n    console.log(interval)\n  }\n\n  function tickFunction(){\n    // 0 means kill, 1 means spawn\n    let transformArray = Array.from(Array(gridHeight), _ => Array(gridWidth).fill(0))\n\n    for (let row = 0; row < gridHeight; row++){\n      for (let col = 0; col < gridWidth; col++){\n        let element = getElement([row, col])\n        let neighbors =  getNeighbors(element)\n        let aliveCount = 0\n        for (let neighbor of neighbors){\n          if (neighbor.classList.contains(\"alive\")){\n            aliveCount += 1;\n          }\n        }\n\n        if (element.classList.contains(\"alive\")){\n          if (!(aliveCount <= 1 || aliveCount >= 4)){\n            transformArray[row][col] = 1\n          }\n        }\n        else{\n          if (aliveCount == 3){\n            transformArray[row][col] = 1\n          }\n        }\n\n      }\n    }\n\n    for (let row = 0; row < gridHeight; row++){\n      for (let col = 0; col < gridWidth; col++){\n        let element = getElement([row, col])\n        if (transformArray[row][col] == 1){\n          element.classList.add(\"alive\")\n        }\n        else{\n          element.classList.remove('alive')\n        }\n      }\n    }\n\n  }\n\n  function step(){\n    if (running) return;\n    tickFunction()\n  }\n\n  // get the given neighbors of a cell.. this includes barriers and closed nodes so have to filter in the function\n  // returns array of elements\n  function getNeighbors(element) {\n    var [row, col] = getCoords(element)\n    var elements = []\n\n    elements.push(getElement([row + 1, col]))\n    elements.push(getElement([row - 1, col]))\n    elements.push(getElement([row, col + 1]))\n    elements.push(getElement([row, col - 1]))\n\n    elements.push(getElement([row + 1, col + 1]))\n    elements.push(getElement([row + 1, col - 1]))\n    elements.push(getElement([row - 1, col + 1]))\n    elements.push(getElement([row - 1, col - 1]))\n\n    // filter out the null elements\n    elements = elements.filter((a) => a)\n\n    return (elements)\n  }\n\n  // stop the interval from running when the algorithm is done\n  function stopInterval() {\n    clearInterval(interval)\n    running = false\n    var goButton = document.getElementById('goButton')\n    goButton.innerHTML = \"Go\"\n    goButton.style.color = ''\n    var speedInput = document.getElementById(\"simSpeed\")\n    speedInput.disabled = false;\n  }\n\n  function clear(){\n    if (running) return;\n    for (let row = 0; row < gridHeight; row++){\n      for (let col = 0; col < gridWidth; col++){\n        let element = getElement([row, col])\n        element.classList.remove(\"alive\")\n      }\n    }\n  }\n\n  // no context menu, reload button pops up on resize\n  window.addEventListener('contextmenu', e => e.preventDefault())\n  window.addEventListener('resize', e => document.getElementById('resizeAlert').style.display = 'block')\n\n  // RENDERING\n\n  // default cell size\n  var boxSize = 20\n\n  var gridHeight = Math.floor((window.innerHeight - 90) / boxSize)\n  var gridWidth = Math.floor((window.innerWidth) / boxSize)\n\n  var timeDelay = 100;\n\n  function makeGrid() {\n    var grid = []\n    for (let row = 0; row < gridHeight; row++) {\n      grid.push([])\n      for (let col = 0; col < gridWidth; col++) {\n        grid[row].push(<Box row={row} col={col} boxSize={boxSize} />)\n      }\n    }\n    return (grid)\n  }\n\n  return (\n    <div className=\"App\" style={{ userSelect: 'none' }}>\n      <div id='header'>\n        <p className=\"button\" onClick={() => startAlgorithm()} id='goButton'>Go</p>\n        <p className=\"button\" onClick={() => step()} id='stepButton'>Step</p>\n        <p className=\"button\" onClick={() => clear()} id='clearButton'>Clear</p>\n        <p>Sim Speed (ms):</p>\n        <input id='simSpeed' type='number' placeholder='100' onChange={(e) => timeDelay = e.target.value}/>\n      </div>\n      <div id='grid'>\n        {makeGrid().map((row, key) => {\n          return (\n            <div className='row' id={key}>\n              {row.map((element) => {\n                return (element)\n              })}\n            </div>\n          )\n        })}\n      </div>\n      <span id='resizeAlert' onClick={() => window.location.reload()}>Looks like you resized your window. <br /> Click here to reset the grid</span>\n      <p id='myName'><a href='https://owenmoogk.github.io' target='_blank' rel='noreferrer'>Owen Moogk</a></p>\n      <p id='infoButton'><a href='https://owenmoogk.github.io/projects/game-of-life' target='_blank' rel='noreferrer'>About This Project</a></p>\n    </div>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}